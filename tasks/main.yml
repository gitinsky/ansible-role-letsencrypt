---
# tasks file for roles/letsencrypt
- name: install requirements and update apt cache if it is too old
  apt: name={{ item }} update_cache=yes cache_valid_time=86400
  with_items:
      - git
      - openssl

- name: create required directories
  file: dest={{ item }} state=directory
  with_items:
      - "{{ letsencrypt_path }}"
      - "{{ letsencrypt_webroot }}"

- name: clone letsencrypt repository
  git: repo=https://github.com/certbot/certbot dest={{ letsencrypt_path }} version=master force=yes

# When certificate is created for multiple (SAN) domains the first domain name is used as path for key and certs. Let's check the list of DNS names for the cert by the first domain (if any)

- name: get list of domains in certificate if any
  shell: set -o pipefail && openssl x509 -text < {{ letsencrypt_path }}/live/{{ item.domains[0] }}/cert.pem|grep DNS|tr -d ' '|tr ',' '\n'|cut -d ':' -f 2
  failed_when: false
  changed_when: false
  args:
    executable: /bin/bash
  check_mode: no
  with_items: "{{ letsencrypt }}"
  register: dns_info
  tags: dontgen

- name: check if server listens on port 80
  shell: set -o pipefail && netstat -tunlp | grep ":80 "
  args:
    executable: /bin/bash
  failed_when: false
  changed_when: check_80.rc == 1
  register: check_80
  check_mode: no
  tags: dontgen

- name: check if server listens on port 443
  shell: set -o pipefail && netstat -tunlp | grep ":443 "
  args:
    executable: /bin/bash
  failed_when: false
  changed_when: check_443.rc == 1
  register: check_443
  check_mode: no
  tags: dontgen


# Create generation commands if domain list in existing certificate is incomplete (it is empty if certificate doesn't exist)

- name: define generation commands
  set_fact:
      generate_cmds:
               "{%- set generation_indexes = [] -%}
                {%- for san_dict in letsencrypt -%}
                    {%- set i = loop.index0 -%}
                    {%- for domain in san_dict.domains -%}
                        {%- if domain not in dns_info.results[i].stdout_lines -%}
                            {%- if i not in generation_indexes -%}{%- if generation_indexes.append(i) -%}{%- endif -%}{%- endif -%}
                        {%- endif -%}
                    {%- endfor -%}
                {%- endfor -%}
                {%- for i in generation_indexes -%}
                    {{ letsencrypt_path }}/letsencrypt-auto certonly --noninteractive --agree-tos --redirect --expand --text --email {{ letsencrypt[i].email }}
                    {%- for domain in letsencrypt[i].domains -%}
                        {{ ' ' }}-d {{ domain }}
                    {%- endfor -%}
                    {{ ' ' }}
                    {%- if check_443.changed  and check_80.changed -%}
                        --standalone
                    {%- else -%}
                        --webroot --webroot-path {{ letsencrypt_webroot }}
                    {%- endif -%}
                    {{ '\n' if not loop.last else '' }}
                {%- endfor -%}"

  tags: dontgen

- name: show cert generation commands
  debug: var=generate_cmds.split('\n')
  tags: dontgen

- name: generate cert
  shell: "{{ item.0 }}"
  when: item.0|length > 0 and item.1 == inventory_hostname
  register: gen_result # noqa 305
  notify: reload nginx
  with_nested: # noqa 104
      - generate_cmds.split('\n')
      - play_hosts if letsencrypt_group else [inventory_hostname]

- block:
  - name: show generation results
    debug: var={{ gen_result.results|map(attribute='stdout_lines')|list }}

  rescue:
  - name: show generation results
    debug: var=gen_result.results

  always:

  - name: put letsencrypt cron job
    template: src=cron.d/letsencrypt.j2 dest=/etc/cron.d/letsencrypt
    tags:
      - dontgen
      - cron
